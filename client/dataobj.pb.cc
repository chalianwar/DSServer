// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataobj.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataobj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dataobj {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_trace_operator_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_request_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dataobj_2eproto() {
  protobuf_AddDesc_dataobj_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dataobj.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, obj_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, operator_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, ec_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, rq_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, flash_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, flash_victim_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, flash_full_blk_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, node_nr_erases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, local_log_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_time_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_trace_operator_t_descriptor_ = Message_descriptor_->enum_type(0);
  Message_request_type_t_descriptor_ = Message_descriptor_->enum_type(1);
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, rsp_time_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dataobj_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dataobj_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_dataobj_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdataobj.proto\022\007dataobj\"\256\004\n\007Message\022\016\n\006"
    "obj_no\030\001 \002(\r\022\016\n\006offset\030\002 \002(\r\022\016\n\006length\030\003"
    " \002(\r\0225\n\noperator_t\030\004 \002(\0162!.dataobj.Messa"
    "ge.trace_operator_t\022\021\n\ttimestamp\030\005 \002(\002\022\020"
    "\n\010ec_index\030\006 \002(\005\0220\n\007rq_type\030\007 \002(\0162\037.data"
    "obj.Message.request_type_t\022\031\n\021flash_util"
    "ization\030\010 \002(\002\022 \n\030flash_victim_utilizatio"
    "n\030\t \002(\002\022\"\n\032flash_full_blk_utilization\030\n "
    "\002(\002\022\026\n\016node_nr_erases\030\013 \002(\r\022\035\n\025local_log"
    "_utilization\030\014 \002(\002\022\026\n\016request_number\030\r \002"
    "(\002\022\025\n\rresponse_time\030\016 \001(\002\"L\n\020trace_opera"
    "tor_t\022\021\n\roperator_read\020\001\022\022\n\016operator_wri"
    "te\020\002\022\021\n\roperator_trim\020\003\"P\n\016request_type_"
    "t\022\023\n\017need_flash_info\020\001\022\027\n\023not_need_flash"
    "_info\020\002\022\020\n\014shut_cluster\020\003\")\n\010Response\022\013\n"
    "\003rsp\030\001 \002(\t\022\020\n\010rsp_time\030\002 \002(\002", 628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataobj.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Response::default_instance_ = new Response();
  Message::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dataobj_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dataobj_2eproto {
  StaticDescriptorInitializer_dataobj_2eproto() {
    protobuf_AddDesc_dataobj_2eproto();
  }
} static_descriptor_initializer_dataobj_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_trace_operator_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_trace_operator_t_descriptor_;
}
bool Message_trace_operator_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_trace_operator_t Message::operator_read;
const Message_trace_operator_t Message::operator_write;
const Message_trace_operator_t Message::operator_trim;
const Message_trace_operator_t Message::trace_operator_t_MIN;
const Message_trace_operator_t Message::trace_operator_t_MAX;
const int Message::trace_operator_t_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_request_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_request_type_t_descriptor_;
}
bool Message_request_type_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_request_type_t Message::need_flash_info;
const Message_request_type_t Message::not_need_flash_info;
const Message_request_type_t Message::shut_cluster;
const Message_request_type_t Message::request_type_t_MIN;
const Message_request_type_t Message::request_type_t_MAX;
const int Message::request_type_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kObjNoFieldNumber;
const int Message::kOffsetFieldNumber;
const int Message::kLengthFieldNumber;
const int Message::kOperatorTFieldNumber;
const int Message::kTimestampFieldNumber;
const int Message::kEcIndexFieldNumber;
const int Message::kRqTypeFieldNumber;
const int Message::kFlashUtilizationFieldNumber;
const int Message::kFlashVictimUtilizationFieldNumber;
const int Message::kFlashFullBlkUtilizationFieldNumber;
const int Message::kNodeNrErasesFieldNumber;
const int Message::kLocalLogUtilizationFieldNumber;
const int Message::kRequestNumberFieldNumber;
const int Message::kResponseTimeFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataobj.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dataobj.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  obj_no_ = 0u;
  offset_ = 0u;
  length_ = 0u;
  operator_t_ = 1;
  timestamp_ = 0;
  ec_index_ = 0;
  rq_type_ = 1;
  flash_utilization_ = 0;
  flash_victim_utilization_ = 0;
  flash_full_blk_utilization_ = 0;
  node_nr_erases_ = 0u;
  local_log_utilization_ = 0;
  request_number_ = 0;
  response_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:dataobj.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataobj_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(obj_no_, length_);
    ZR_(timestamp_, ec_index_);
    operator_t_ = 1;
    rq_type_ = 1;
    flash_utilization_ = 0;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(flash_victim_utilization_, response_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataobj.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 obj_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_no_)));
          set_has_obj_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint32 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operator_t;
        break;
      }

      // required .dataobj.Message.trace_operator_t operator_t = 4;
      case 4: {
        if (tag == 32) {
         parse_operator_t:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataobj::Message_trace_operator_t_IsValid(value)) {
            set_operator_t(static_cast< ::dataobj::Message_trace_operator_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_timestamp;
        break;
      }

      // required float timestamp = 5;
      case 5: {
        if (tag == 45) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ec_index;
        break;
      }

      // required int32 ec_index = 6;
      case 6: {
        if (tag == 48) {
         parse_ec_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ec_index_)));
          set_has_ec_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rq_type;
        break;
      }

      // required .dataobj.Message.request_type_t rq_type = 7;
      case 7: {
        if (tag == 56) {
         parse_rq_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataobj::Message_request_type_t_IsValid(value)) {
            set_rq_type(static_cast< ::dataobj::Message_request_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_flash_utilization;
        break;
      }

      // required float flash_utilization = 8;
      case 8: {
        if (tag == 69) {
         parse_flash_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flash_utilization_)));
          set_has_flash_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_flash_victim_utilization;
        break;
      }

      // required float flash_victim_utilization = 9;
      case 9: {
        if (tag == 77) {
         parse_flash_victim_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flash_victim_utilization_)));
          set_has_flash_victim_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_flash_full_blk_utilization;
        break;
      }

      // required float flash_full_blk_utilization = 10;
      case 10: {
        if (tag == 85) {
         parse_flash_full_blk_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flash_full_blk_utilization_)));
          set_has_flash_full_blk_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_node_nr_erases;
        break;
      }

      // required uint32 node_nr_erases = 11;
      case 11: {
        if (tag == 88) {
         parse_node_nr_erases:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_nr_erases_)));
          set_has_node_nr_erases();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_local_log_utilization;
        break;
      }

      // required float local_log_utilization = 12;
      case 12: {
        if (tag == 101) {
         parse_local_log_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &local_log_utilization_)));
          set_has_local_log_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_request_number;
        break;
      }

      // required float request_number = 13;
      case 13: {
        if (tag == 109) {
         parse_request_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &request_number_)));
          set_has_request_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_response_time;
        break;
      }

      // optional float response_time = 14;
      case 14: {
        if (tag == 117) {
         parse_response_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &response_time_)));
          set_has_response_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataobj.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataobj.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataobj.Message)
  // required uint32 obj_no = 1;
  if (has_obj_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_no(), output);
  }

  // required uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // required uint32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // required .dataobj.Message.trace_operator_t operator_t = 4;
  if (has_operator_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->operator_t(), output);
  }

  // required float timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->timestamp(), output);
  }

  // required int32 ec_index = 6;
  if (has_ec_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ec_index(), output);
  }

  // required .dataobj.Message.request_type_t rq_type = 7;
  if (has_rq_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->rq_type(), output);
  }

  // required float flash_utilization = 8;
  if (has_flash_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->flash_utilization(), output);
  }

  // required float flash_victim_utilization = 9;
  if (has_flash_victim_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->flash_victim_utilization(), output);
  }

  // required float flash_full_blk_utilization = 10;
  if (has_flash_full_blk_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->flash_full_blk_utilization(), output);
  }

  // required uint32 node_nr_erases = 11;
  if (has_node_nr_erases()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->node_nr_erases(), output);
  }

  // required float local_log_utilization = 12;
  if (has_local_log_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->local_log_utilization(), output);
  }

  // required float request_number = 13;
  if (has_request_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->request_number(), output);
  }

  // optional float response_time = 14;
  if (has_response_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->response_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dataobj.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataobj.Message)
  // required uint32 obj_no = 1;
  if (has_obj_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_no(), target);
  }

  // required uint32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // required uint32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // required .dataobj.Message.trace_operator_t operator_t = 4;
  if (has_operator_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->operator_t(), target);
  }

  // required float timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->timestamp(), target);
  }

  // required int32 ec_index = 6;
  if (has_ec_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ec_index(), target);
  }

  // required .dataobj.Message.request_type_t rq_type = 7;
  if (has_rq_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->rq_type(), target);
  }

  // required float flash_utilization = 8;
  if (has_flash_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->flash_utilization(), target);
  }

  // required float flash_victim_utilization = 9;
  if (has_flash_victim_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->flash_victim_utilization(), target);
  }

  // required float flash_full_blk_utilization = 10;
  if (has_flash_full_blk_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->flash_full_blk_utilization(), target);
  }

  // required uint32 node_nr_erases = 11;
  if (has_node_nr_erases()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->node_nr_erases(), target);
  }

  // required float local_log_utilization = 12;
  if (has_local_log_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->local_log_utilization(), target);
  }

  // required float request_number = 13;
  if (has_request_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->request_number(), target);
  }

  // optional float response_time = 14;
  if (has_response_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->response_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataobj.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 obj_no = 1;
    if (has_obj_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_no());
    }

    // required uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // required .dataobj.Message.trace_operator_t operator_t = 4;
    if (has_operator_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_t());
    }

    // required float timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // required int32 ec_index = 6;
    if (has_ec_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ec_index());
    }

    // required .dataobj.Message.request_type_t rq_type = 7;
    if (has_rq_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rq_type());
    }

    // required float flash_utilization = 8;
    if (has_flash_utilization()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float flash_victim_utilization = 9;
    if (has_flash_victim_utilization()) {
      total_size += 1 + 4;
    }

    // required float flash_full_blk_utilization = 10;
    if (has_flash_full_blk_utilization()) {
      total_size += 1 + 4;
    }

    // required uint32 node_nr_erases = 11;
    if (has_node_nr_erases()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_nr_erases());
    }

    // required float local_log_utilization = 12;
    if (has_local_log_utilization()) {
      total_size += 1 + 4;
    }

    // required float request_number = 13;
    if (has_request_number()) {
      total_size += 1 + 4;
    }

    // optional float response_time = 14;
    if (has_response_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_no()) {
      set_obj_no(from.obj_no());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_operator_t()) {
      set_operator_t(from.operator_t());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ec_index()) {
      set_ec_index(from.ec_index());
    }
    if (from.has_rq_type()) {
      set_rq_type(from.rq_type());
    }
    if (from.has_flash_utilization()) {
      set_flash_utilization(from.flash_utilization());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flash_victim_utilization()) {
      set_flash_victim_utilization(from.flash_victim_utilization());
    }
    if (from.has_flash_full_blk_utilization()) {
      set_flash_full_blk_utilization(from.flash_full_blk_utilization());
    }
    if (from.has_node_nr_erases()) {
      set_node_nr_erases(from.node_nr_erases());
    }
    if (from.has_local_log_utilization()) {
      set_local_log_utilization(from.local_log_utilization());
    }
    if (from.has_request_number()) {
      set_request_number(from.request_number());
    }
    if (from.has_response_time()) {
      set_response_time(from.response_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(obj_no_, other->obj_no_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(operator_t_, other->operator_t_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(ec_index_, other->ec_index_);
    std::swap(rq_type_, other->rq_type_);
    std::swap(flash_utilization_, other->flash_utilization_);
    std::swap(flash_victim_utilization_, other->flash_victim_utilization_);
    std::swap(flash_full_blk_utilization_, other->flash_full_blk_utilization_);
    std::swap(node_nr_erases_, other->node_nr_erases_);
    std::swap(local_log_utilization_, other->local_log_utilization_);
    std::swap(request_number_, other->request_number_);
    std::swap(response_time_, other->response_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kRspFieldNumber;
const int Response::kRspTimeFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataobj.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dataobj.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rsp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsp_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:dataobj.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (rsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rsp_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataobj_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_rsp()) {
      if (rsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rsp_->clear();
      }
    }
    rsp_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataobj.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rsp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rsp().data(), this->rsp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rsp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rsp_time;
        break;
      }

      // required float rsp_time = 2;
      case 2: {
        if (tag == 21) {
         parse_rsp_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rsp_time_)));
          set_has_rsp_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataobj.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataobj.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataobj.Response)
  // required string rsp = 1;
  if (has_rsp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rsp().data(), this->rsp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rsp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rsp(), output);
  }

  // required float rsp_time = 2;
  if (has_rsp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rsp_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dataobj.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataobj.Response)
  // required string rsp = 1;
  if (has_rsp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rsp().data(), this->rsp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rsp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rsp(), target);
  }

  // required float rsp_time = 2;
  if (has_rsp_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rsp_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataobj.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rsp = 1;
    if (has_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsp());
    }

    // required float rsp_time = 2;
    if (has_rsp_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp()) {
      set_rsp(from.rsp());
    }
    if (from.has_rsp_time()) {
      set_rsp_time(from.rsp_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(rsp_, other->rsp_);
    std::swap(rsp_time_, other->rsp_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataobj

// @@protoc_insertion_point(global_scope)
